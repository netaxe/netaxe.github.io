import{_ as t,p as d,q as r,$ as e}from"./framework-71306714.js";const a={},h=e('<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>早期平台是一个单体应用，随着功能和需求的不断增多，维护一个单体巨石应用的成本和劣势逐渐凸显，并且到了无法忍受的地步。<br> 每次小的功能更新都不得不重启整个后端服务，造成前端交互短暂失联。</p><p>单机数据库写请求量大量增加，导致数据库压力变大 数据库一旦挂了，那么整个业务都挂了 业务代码越来越多，都在一个 GIT 里，越来越难以维护 代码腐化严重、臭味越来越浓 上线越来越频繁，经常是一个小功能的修改，就要整个大项目要重新编译 协作成员增加，在同一项目中协作效率低(功能模块多，更新多，逐渐臃肿) 其他一些外围系统直接连接数据库，导致一旦数据库结构发生变化，所有的相关系统都要通知，甚至对修改不敏感的系统也要通知 每个应用服务器需要开通所有的权限、网络、FTP、各种各样的，因为每个服务器部署的应用都是一样的</p><h2 id="架构设计原则" tabindex="-1"><a class="header-anchor" href="#架构设计原则" aria-hidden="true">#</a> 架构设计原则</h2><p>从架构了可维护性和标准化角度出发，每个后端应用，应该具备相对一致的代码目录结构、一致的配置加载规范、一致的消息总线配置。<br> 所有微服务应用都应该是易部署，可重复的功能模块(可重复部署、简化部署步骤)<br> 通用的 API 端点。</p><h2 id="应用端口规划表" tabindex="-1"><a class="header-anchor" href="#应用端口规划表" aria-hidden="true">#</a> 应用端口规划表</h2><table><thead><tr><th>应用</th><th>前端 web</th><th>后端 controller</th><th>别名</th></tr></thead><tbody><tr><td>微前端主应用</td><td>9980</td><td>-</td><td>-</td></tr><tr><td>基础平台</td><td>32200</td><td>31100</td><td>base</td></tr><tr><td>消息网关</td><td>32201</td><td>31101</td><td>msg-gateway</td></tr><tr><td>告警中心</td><td>32202</td><td>31102</td><td>alert</td></tr><tr><td>IPAM</td><td>32203</td><td>31103</td><td>ipam</td></tr><tr><td>RBAC</td><td>32204</td><td>31104</td><td>rbac</td></tr><tr><td>南向驱动</td><td>32205</td><td>31105</td><td>south-driver</td></tr><tr><td>监控中心</td><td>32206</td><td>31106</td><td>neteye</td></tr><tr><td>可视化指标</td><td>32207</td><td>31107</td><td>metric</td></tr><tr><td>DCN 控制器</td><td>32208</td><td>31108</td><td>dcn</td></tr><tr><td>DCS 控制器</td><td>32208</td><td>31108</td><td>dcs</td></tr><tr><td>工作流引擎</td><td>32209</td><td>31109</td><td>work-flow</td></tr><tr><td>资源平台</td><td>32210</td><td>31110</td><td>cmdb</td></tr><tr><td>私有平台</td><td>32211</td><td>31111</td><td>private</td></tr><tr><td>巡检平台</td><td>32212</td><td>31112</td><td>inspect</td></tr></tbody></table><h2 id="底层工具端口规划表" tabindex="-1"><a class="header-anchor" href="#底层工具端口规划表" aria-hidden="true">#</a> 底层工具端口规划表</h2><table><thead><tr><th>应用</th><th>端口</th></tr></thead><tbody><tr><td>apisix-dashboard</td><td>39000</td></tr><tr><td>apisix</td><td>9080/9091/9092/9443</td></tr><tr><td>etcd</td><td>2379</td></tr><tr><td>mongo</td><td>37018</td></tr><tr><td>mongo-express</td><td>37017</td></tr><tr><td>mysql</td><td>36306</td></tr><tr><td>redis</td><td>36379</td></tr><tr><td>rabbitmq</td><td>31672/32672</td></tr><tr><td>nacos</td><td>8848</td></tr><tr><td>pushgateway</td><td>39091</td></tr><tr><td>prometheus</td><td>39090</td></tr></tbody></table><h2 id="技术架构图" tabindex="-1"><a class="header-anchor" href="#技术架构图" aria-hidden="true">#</a> 技术架构图</h2><h2 id="后端技术选型" tabindex="-1"><a class="header-anchor" href="#后端技术选型" aria-hidden="true">#</a> 后端技术选型</h2><h2 id="前端技术选型" tabindex="-1"><a class="header-anchor" href="#前端技术选型" aria-hidden="true">#</a> 前端技术选型</h2>',12),i=[h];function n(s,c){return d(),r("div",null,i)}const b=t(a,[["render",n],["__file","introduce.html.vue"]]);export{b as default};
